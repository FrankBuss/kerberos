
SYMBOLS {
    __STACKSIZE__: type = weak, value = $0800;
}

MEMORY {
    ZP:             start = $0002, size = $001A, type = rw, define = yes;
    RAM:            start = $07FF, size = $a801, file = %O, define = yes;
    ZP_BACKUP:      start = $c400, size = $001A, type = rw, define = yes; # size like ZP
    HIRAM:          start = $c000, size = $1000, type = rw, define = yes;
}

SEGMENTS {
    STARTUP:  load =   RAM, type = ro;
    LOWCODE:  load =   RAM, type = ro, optional = yes;
    INIT:     load =   RAM, type = ro, define = yes, optional = yes;
    CODE:     load =   RAM, type = ro, align = $10;
    RODATA:   load =   RAM, type = ro, align = $100;
    DATA:     load =   RAM, type = rw;
    ZPSAVE:   load =   RAM, type = bss;
    BSS:      load =   RAM, type = bss, define = yes;   # must be below HEAP
    HEAP:     load =   RAM, type = bss, optional = yes; # must sit just below stack at end of RAM
    ZEROPAGE: load =    ZP, type = zp;
}

FEATURES {
    CONDES: segment = INIT,
        type = constructor,
        label = __CONSTRUCTOR_TABLE__,
        count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
        type = destructor,
        label = __DESTRUCTOR_TABLE__,
        count = __DESTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
        type = interruptor,
        label = __INTERRUPTOR_TABLE__,
        count = __INTERRUPTOR_COUNT__;
}

MEMORY {
}

