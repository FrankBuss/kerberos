;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.import		_strcat
	.import		_strcpy
	.import		_screenPrintSimpleDialog
	.import		_screenPrintTwoLinesDialog
	.import		_screenAskEraseDialog
	.import		_screenIsStopPressed
	.import		_apStrBadRAM
	.import		_pStrTestFailed
	.import		_apStrTestEndless
	.import		_setStatus
	.import		_refreshMainScreen
	.import		_flashWriteBlock
	.import		_flashVerifyBlock
	.import		_tortureTestFillBuffer
	.import		_tortureTestBanking
	.import		_tortureTestCheckRAM
	.export		_tortureTestAuto
	.export		_tortureTestComplete
	.export		_tortureTestRead
	.export		_tortureTestRAM
	.import		_eapiReInit
	.import		_slotSelect
	.import		_g_nSelectedSlot
	.import		_g_nSlots
	.import		_utilAppendHex2
	.import		_utilAppendStr
	.import		_utilAppendDecimal
	.import		_utilStr

.segment	"RODATA"

L0001:
	.byte	$28,$C9,$4E,$49,$54,$29,$00,$D4,$45,$53,$54,$20,$4C,$4F,$4F,$50
	.byte	$20,$00,$20,$2D,$20,$4C,$4F,$4F,$50,$20,$00,$20,$4F,$4B,$00,$C2
	.byte	$41,$4E,$4B,$20,$54,$45,$53,$54,$20,$45,$52,$52,$4F,$52,$3A,$20
	.byte	$53,$45,$54,$20,$00,$20,$21,$3D,$20,$52,$45,$41,$44,$20,$00,$D2
	.byte	$C1,$CD,$20,$54,$45,$53,$54,$20,$4C,$4F,$4F,$50,$20,$00

; ---------------------------------------------------------------
; void __near__ tortureTestAuto (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tortureTestAuto: near

.segment	"CODE"

;
; tortureTest(1, 1);
;
	lda     #$01
	jsr     pusha
	jsr     pusha
	jmp     _tortureTest

.endproc

; ---------------------------------------------------------------
; void __near__ tortureTestComplete (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tortureTestComplete: near

.segment	"CODE"

;
; tortureTest(1, 0);
;
	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     pusha
	jmp     _tortureTest

.endproc

; ---------------------------------------------------------------
; void __near__ tortureTestRead (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tortureTestRead: near

.segment	"CODE"

;
; tortureTest(0, 0);
;
	lda     #$00
	jsr     pusha
	jsr     pusha
	jmp     _tortureTest

.endproc

; ---------------------------------------------------------------
; void __near__ tortureTestRAM (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tortureTestRAM: near

.segment	"BSS"

L00FF:
	.res	2,$00

.segment	"CODE"

;
; screenPrintSimpleDialog(apStrTestEndless);
;
	lda     #<(_apStrTestEndless)
	ldx     #>(_apStrTestEndless)
	jsr     _screenPrintSimpleDialog
;
; for (nLoop = 0; ; ++nLoop)
;
	lda     #$00
	sta     L00FF
	sta     L00FF+1
;
; strcpy(utilStr, "RAM test loop ");
;
L0105:	ldy     #$FF
L010D:	iny
	lda     L0001+63,y
	sta     _utilStr,y
	bne     L010D
;
; utilAppendDecimal(nLoop);
;
	lda     L00FF
	ldx     L00FF+1
	jsr     _utilAppendDecimal
;
; setStatus(utilStr);
;
	lda     #<(_utilStr)
	ldx     #>(_utilStr)
	jsr     _setStatus
;
; if (!tortureTestCheckRAM())
;
	jsr     _tortureTestCheckRAM
	tax
	bne     L0112
;
; screenPrintSimpleDialog(apStrBadRAM);
;
	lda     #<(_apStrBadRAM)
	ldx     #>(_apStrBadRAM)
	jsr     _screenPrintSimpleDialog
;
; refreshMainScreen();
;
	jsr     _refreshMainScreen
;
; if (screenIsStopPressed())
;
L0112:	jsr     _screenIsStopPressed
	tax
;
; return;
;
	bne     L0103
;
; for (nLoop = 0; ; ++nLoop)
;
	inc     L00FF
	bne     L0105
	inc     L00FF+1
	jmp     L0105
;
; }
;
L0103:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ tortureTestWriteData (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tortureTestWriteData: near

.segment	"BSS"

L0010:
	.res	5,$00

.segment	"CODE"

;
; for (addr.nSlot = 0; addr.nSlot < g_nSlots; ++addr.nSlot)
;
	lda     #$00
	sta     L0010
L0011:	ldx     #$00
	lda     L0010
	cmp     _g_nSlots
	bcs     L0012
;
; slotSelect(addr.nSlot); // also refreshes the screen
;
	lda     L0010
	jsr     _slotSelect
;
; for (addr.nBank = 0; addr.nBank < FLASH_NUM_BANKS; ++addr.nBank)
;
	lda     #$00
	sta     L0010+1
L001B:	lda     L0010+1
	cmp     #$40
	bcs     L0013
;
; for (addr.nChip = 0; addr.nChip < 2; ++addr.nChip)
;
	lda     #$00
	sta     L0010+2
L0023:	lda     L0010+2
	cmp     #$02
	bcs     L001D
;
; for (addr.nOffset = 0; addr.nOffset < 0x2000; addr.nOffset += 256)
;
	lda     #$00
	sta     L0010+3
L0119:	sta     L0010+3+1
	ldx     L0010+3+1
	cpx     #$20
	bcs     L0025
;
; tortureTestFillBuffer(&addr);
;
	lda     #<(L0010)
	ldx     #>(L0010)
	jsr     _tortureTestFillBuffer
;
; if (!flashWriteBlock(&addr))
;
	lda     #<(L0010)
	ldx     #>(L0010)
	jsr     _flashWriteBlock
	tax
	bne     L0036
;
; return 0;
;
	rts
;
; if (screenIsStopPressed())
;
L0036:	jsr     _screenIsStopPressed
	tax
	beq     L002D
;
; return 0;
;
	ldx     #$00
	txa
	rts
;
; for (addr.nOffset = 0; addr.nOffset < 0x2000; addr.nOffset += 256)
;
L002D:	clc
	adc     L0010+3
	sta     L0010+3
	lda     #$01
	adc     L0010+3+1
	jmp     L0119
;
; for (addr.nChip = 0; addr.nChip < 2; ++addr.nChip)
;
L0025:	inc     L0010+2
	jmp     L0023
;
; for (addr.nBank = 0; addr.nBank < FLASH_NUM_BANKS; ++addr.nBank)
;
L001D:	inc     L0010+1
	jmp     L001B
;
; for (addr.nSlot = 0; addr.nSlot < g_nSlots; ++addr.nSlot)
;
L0013:	inc     L0010
	jmp     L0011
;
; return 1;
;
L0012:	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ tortureTestVerify (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tortureTestVerify: near

.segment	"BSS"

L003F:
	.res	5,$00

.segment	"CODE"

;
; addr.nSlot = g_nSelectedSlot;
;
	lda     _g_nSelectedSlot
	sta     L003F
;
; for (addr.nBank = 0; addr.nBank < FLASH_NUM_BANKS; ++addr.nBank)
;
	lda     #$00
	sta     L003F+1
L0046:	lda     L003F+1
	cmp     #$40
	bcs     L0047
;
; for (addr.nChip = 0; addr.nChip < 2; ++addr.nChip)
;
	lda     #$00
	sta     L003F+2
L005A:	lda     L003F+2
	cmp     #$02
	bcs     L0048
;
; for (addr.nOffset = 0; addr.nOffset < 0x2000; addr.nOffset += 256)
;
	lda     #$00
	sta     L003F+3
L011A:	sta     L003F+3+1
	ldx     L003F+3+1
	cpx     #$20
	bcs     L006F
;
; tortureTestFillBuffer(&addr);
;
	lda     #<(L003F)
	ldx     #>(L003F)
	jsr     _tortureTestFillBuffer
;
; if (!flashVerifyBlock(&addr))
;
	lda     #<(L003F)
	ldx     #>(L003F)
	jsr     _flashVerifyBlock
	tax
	bne     L0070
;
; return 0;
;
	rts
;
; for (addr.nOffset = 0; addr.nOffset < 0x2000; addr.nOffset += 256)
;
L0070:	lda     #$00
	clc
	adc     L003F+3
	sta     L003F+3
	lda     #$01
	adc     L003F+3+1
	jmp     L011A
;
; if (screenIsStopPressed())
;
L006F:	jsr     _screenIsStopPressed
	tax
	beq     L005C
;
; return 0;
;
	ldx     #$00
	txa
	rts
;
; for (addr.nChip = 0; addr.nChip < 2; ++addr.nChip)
;
L005C:	inc     L003F+2
	jmp     L005A
;
; for (addr.nBank = 0; addr.nBank < FLASH_NUM_BANKS; ++addr.nBank)
;
L0048:	inc     L003F+1
	jmp     L0046
;
; return 1;
;
L0047:	ldx     #$00
	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ tortureTestFlashIds (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tortureTestFlashIds: near

.segment	"BSS"

L008E:
	.res	1,$00

.segment	"CODE"

;
; nLoop = 0;
;
	lda     #$00
	sta     L008E
;
; if (!eapiReInit())
;
L0091:	jsr     _eapiReInit
	tax
	bne     L0094
;
; screenPrintTwoLinesDialog(pStrTestFailed, "(Init)");
;
	lda     _pStrTestFailed
	ldx     _pStrTestFailed+1
	jsr     pushax
	lda     #<(L0001)
	ldx     #>(L0001)
	jsr     _screenPrintTwoLinesDialog
;
; return 0;
;
	ldx     #$00
	txa
	rts
;
; while(++nLoop);
;
L0094:	inc     L008E
	ldx     L008E
	bne     L0091
;
; return 1;
;
	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tortureTest (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tortureTest: near

.segment	"BSS"

L009D:
	.res	2,$00
L009E:
	.res	2,$00
L009F:
	.res	2,$00

.segment	"CODE"

;
; if (bComplete && !bAutoTest)
;
	ldy     #$01
	lda     (sp),y
	beq     L00A4
	dey
	lda     (sp),y
	bne     L00A4
;
; if (screenAskEraseDialog() != BUTTON_ENTER)
;
	jsr     _screenAskEraseDialog
	cmp     #$01
;
; return;
;
	jne     incsp2
;
; if (!bAutoTest)
;
L00A4:	ldy     #$00
	lda     (sp),y
	bne     L00A6
;
; screenPrintSimpleDialog(apStrTestEndless);
;
	lda     #<(_apStrTestEndless)
	ldx     #>(_apStrTestEndless)
	jsr     _screenPrintSimpleDialog
;
; refreshMainScreen();
;
L00A6:	jsr     _refreshMainScreen
;
; if (!tortureTestFlashIds())
;
	jsr     _tortureTestFlashIds
	tax
;
; return;
;
	jeq     incsp2
;
; if (bComplete)
;
	ldy     #$01
	lda     (sp),y
	beq     L00AF
;
; if (!tortureTestWriteData())
;
	jsr     _tortureTestWriteData
	tax
;
; return;
;
	jeq     incsp2
;
; for (nLoop = 0; !bAutoTest; ++nLoop)
;
L00AF:	lda     #$00
	sta     L009E
	sta     L009E+1
L00B1:	ldy     #$00
	lda     (sp),y
	jne     incsp2
;
; strcpy(utilStr, "Test loop ");
;
	dey
L00BD:	iny
	lda     L0001+7,y
	sta     _utilStr,y
	bne     L00BD
;
; utilAppendDecimal(nLoop);
;
	lda     L009E
	ldx     L009E+1
	jsr     _utilAppendDecimal
;
; if (nLoop > 0)
;
	lda     L009E
	ora     L009E+1
	beq     L00C0
;
; strcat(utilStr, " - loop ");
;
	lda     #<(_utilStr)
	ldx     #>(_utilStr)
	jsr     pushax
	lda     #<(L0001+18)
	ldx     #>(L0001+18)
	jsr     _strcat
;
; utilAppendDecimal(nLoop - 1);
;
	lda     L009E
	ldx     L009E+1
	jsr     decax1
	jsr     _utilAppendDecimal
;
; strcat(utilStr, " ok");
;
	lda     #<(_utilStr)
	ldx     #>(_utilStr)
	jsr     pushax
	lda     #<(L0001+27)
	ldx     #>(L0001+27)
	jsr     _strcat
;
; setStatus(utilStr);
;
L00C0:	lda     #<(_utilStr)
	ldx     #>(_utilStr)
	jsr     _setStatus
;
; rv = tortureTestBanking();
;
	jsr     _tortureTestBanking
	sta     L009D
	stx     L009D+1
;
; if (rv != 0)
;
	cpx     #$00
	bne     L011B
	cmp     #$00
	beq     L00CF
;
; strcpy(utilStr, "Bank test error: set ");
;
L011B:	ldy     #$FF
L00D5:	iny
	lda     L0001+31,y
	sta     _utilStr,y
	bne     L00D5
;
; utilAppendHex2(rv >> 8);
;
	lda     L009D+1
	jsr     _utilAppendHex2
;
; utilAppendStr(" != read ");
;
	lda     #<(L0001+53)
	ldx     #>(L0001+53)
	jsr     _utilAppendStr
;
; utilAppendHex2(rv & 0xff);
;
	lda     L009D
	jsr     _utilAppendHex2
;
; screenPrintTwoLinesDialog(pStrTestFailed, utilStr);
;
	lda     _pStrTestFailed
	ldx     _pStrTestFailed+1
	jsr     pushax
	lda     #<(_utilStr)
	ldx     #>(_utilStr)
	jsr     _screenPrintTwoLinesDialog
;
; return;
;
	jmp     incsp2
;
; if (!tortureTestCheckRAM())
;
L00CF:	jsr     _tortureTestCheckRAM
	tax
	bne     L00DF
;
; screenPrintSimpleDialog(apStrBadRAM);
;
	lda     #<(_apStrBadRAM)
	ldx     #>(_apStrBadRAM)
	jsr     _screenPrintSimpleDialog
;
; return;
;
	jmp     incsp2
;
; if (!tortureTestFlashIds())
;
L00DF:	jsr     _tortureTestFlashIds
	tax
;
; return;
;
	jeq     incsp2
;
; for (nSlot = 0; nSlot < g_nSlots; ++nSlot)
;
	lda     #$00
	sta     L009F
	sta     L009F+1
L00E5:	lda     L009F
	cmp     _g_nSlots
	lda     L009F+1
	sbc     #$00
	bcs     L00B3
;
; slotSelect(nSlot); // also refreshes the screen
;
	lda     L009F
	jsr     _slotSelect
;
; if (!tortureTestVerify())
;
	jsr     _tortureTestVerify
	tax
;
; return;
;
	jeq     incsp2
;
; for (nSlot = 0; nSlot < g_nSlots; ++nSlot)
;
	inc     L009F
	bne     L00E5
	inc     L009F+1
	jmp     L00E5
;
; for (nLoop = 0; !bAutoTest; ++nLoop)
;
L00B3:	inc     L009E
	jne     L00B1
	inc     L009E+1
	jmp     L00B1

.endproc

