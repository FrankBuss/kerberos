SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0800; # 2k stack
}
MEMORY {
    ZP:       file = "", define = yes, start = $0002, size = $001A;
    LOADADDR: file = %O,               start = $07FF, size = $0002;
    HEADER:   file = %O,               start = $0801, size = $000C;
    LORAM:    file = %O,               start = $080D, size = $0f00 - $080D, define = yes, fill = yes, fillval = $ff;
    BLOCK:    file = %O, define = yes, start = $0f00, size = $0100;
    MUSICM:   file = %O,               start = $1000, size = $1600, define = yes, fill = yes, fillval = $ff;
    GRAPHICSM:start = $2600, size = $0100, file = %O, define = yes, fill = yes, fillval = $ff;
    MTABLES:  file = %O, define = yes, start = $2700, size = $0300;
    RAM:      file = %O, define = yes, start = $2a00, size = $8000 - __STACKSIZE__ - $2a00, fill = yes, fillval = $ff;
    STACK:    file = %O, define = yes, start = $7800, size = $0800, fill = yes, fillval = $ff;
    CARTRIDGE_DISKM:      file = %O, define = yes, start = $8000, size = $2000, fill = yes, fillval = $ff;
    CARTRIDGE_DISK_BUFM:       file = "", define = yes, start = $c000, size = $0100;
    CARTRIDGE_DISK_DATAM:      file = "", define = yes, start = $c100, size = $0100;
    CARTRIDGE_DISK_ZPSAVEM:    file = "", define = yes, start = $c200, size = $0100;
    SRAM_TRAMPOLINE:     start = $df00, size = $0100, type = rw, define = yes;
    DATASETTE:      start = $033c, size = $00c0, type = rw, define = yes;
    CARTRIDGE8000:  start = $8000, size = $2000, type = rw, define = yes;
}
SEGMENTS {
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = HEADER,   type = ro;
    STARTUP:  load = LORAM,    type = ro;
    LOWCODE:  load = LORAM,    type = rw, optional = yes;
    LOADER:   load = RAM, run = DATASETTE, type = rw, define = yes, optional = yes;
    CART128:  load = RAM, run = CARTRIDGE8000, type = rw, define = yes, optional = yes;
    TRAMPOLINE: load = RAM, run = SRAM_TRAMPOLINE, type = rw, define = yes, optional = yes;
    BLOCK_BUFFER:  load = BLOCK,      type = rw, define = yes;
    MUSIC:    load = MUSICM,   type = ro, define = yes, optional = yes;
    GRAPHICS: load = GRAPHICSM,type = ro, define = yes, optional = yes;
    TABLES:   load = MTABLES,  type = rw, define = yes;
    INIT:     load = RAM,      type = ro,  define = yes, optional = yes;
    CODE:     load = RAM,      type = ro;
    RODATA:   load = RAM,      type = ro;
    DATA:     load = RAM,      type = rw;
    ZPSAVE:   load = RAM,      type = bss;
    BSS:      load = RAM,      type = bss, define = yes;
    CARTRIDGE_DISK: load = CARTRIDGE_DISKM, type = ro, define = yes, optional = yes;
    CARTRIDGE_DISK_DATA: load = CARTRIDGE_DISK_DATAM, type = ro, define = yes, optional = yes;
    CARTRIDGE_DISK_BUF: load = CARTRIDGE_DISK_BUFM, type = ro, define = yes, optional = yes;
    CARTRIDGE_DISK_ZPSAVE: load = CARTRIDGE_DISK_ZPSAVEM, type = ro, define = yes, optional = yes;
    ZEROPAGE: load = ZP,       type = zp;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = INIT;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
